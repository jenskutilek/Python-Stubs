from __future__ import annotations

from typing import Any, Iterable, Iterator, List, Sequence
from AppKit import NSIndexPath, NSPoint, NSRect

TTSNAP: int
TTSTEM: int
TTSHIFT: int
TTINTERPOLATE: int
TTDIAGONAL: int
TTDELTA: int

OFFCURVE: str

class Glyphs: ...

class GSFontMaster:
    @property
    def italicAngle(self) -> float: ...

class GSGlyph:
    @property
    def name(self) -> str: ...

class GSHint:
    def copy(self) -> GSHint: ...
    @property
    def isTrueType(self) -> bool: ...
    @property
    def stem(self) -> int: ...
    def setStem_(self, value: int) -> None: ...
    @property
    def type(self) -> int: ...
    @property
    def originIndex(self): ...
    @property
    def targetIndex(self): ...
    @property
    def otherIndex1(self): ...
    @property
    def otherIndex2(self): ...
    def setOriginIndex_(self, value: NSIndexPath): ...
    def setOtherIndex1_(self, value: NSIndexPath): ...
    def setOtherIndex2_(self, value: NSIndexPath): ...
    def setTargetIndex_(self, value: NSIndexPath): ...

class GSLayer:
    @property
    def bounds(self) -> NSRect: ...
    @property
    # def hints(self) -> LayerHintsProxy: ...
    def hints(self) -> Any: ...
    @hints.setter
    def hints(self, value: List[GSHint]) -> None: ...
    @property
    def master(self) -> GSFontMaster: ...
    @property
    def parent(self) -> GSGlyph: ...
    @property
    def paths(self) -> Sequence[GSPath]: ...
    def indexPathOfNode_(self, value) -> NSIndexPath: ...

class GSNode:
    @property
    def index(self) -> int: ...
    @property
    def position(self) -> NSPoint: ...
    @property
    def selected(self) -> bool: ...
    @property
    def type(self) -> str: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...

class GSPath:
    @property
    def nodes(self) -> Sequence[GSNode]: ...

class LayerHintsProxy:
    def __iter__(self) -> Iterator[GSHint]: ...
    def __next__(self) -> GSHint: ...
    def append(self, value: GSHint) -> None: ...
